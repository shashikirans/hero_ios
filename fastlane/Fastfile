default_platform(:ios)

before_all do
    sh 'mkdir ../build || true'
end

# iOS build - Fill below configuration input as per need.
# For more information on builkd settings , see:
# https://docs.fastlane.tools/actions/build_app/#build_app

app_name = ENV["APP_NAME"]
scheme = ENV["APP_SCHEME"]
project = ENV["APP_PROJECT"]
target = ENV["APP_TARGET"]

# The configuration to use when building the app. Defaults to 'Release'
build_config = ENV["APP_BUILD_CONFIG"]

# Method used to export the archive.
# Valid values are: app-store, ad-hoc, package, enterprise, development, developer-id
export_method = ENV["APP_EXPORT_METHOD"]

# Code signing identities
codesign_certificate = ENV["CODESIGN_CERTIFICATE"]

# Output build name
output_build_name = ""

# Lane to run unit test cases
lane :tests do
        # Generate code coverage report
        test_args = {
          scheme: ENV["APP_TEST_SCHEME"],
          clean: true,
          device: "iPhone 8",
          code_coverage: true,
          fail_build: true,
          output_types: "html,junit",
          output_directory: "build",
          output_style: "basic",
          buildlog_path: "build",
          derived_data_path: "build",
        }

        if ENV["APP_WORKSPACE"]
          test_args[:workspace] =  ENV["APP_WORKSPACE"]
        else
          test_args[:project] =  ENV["APP_PROJECT"]
        end

      scan(test_args)
end

    lane :versionbump do |options|
    #   p options[:remote_branch]
    #       version = get_version_number(target: "Hero (iOS)")
    #       p version
    #       new_version = increment_version_number(version_number: version)
    #       p new_version
        #   build = increment_build_number(build_number: new_version)
        #   p build
        increment_build_number

          commit_version_bump(
            xcodeproj: ENV["APP_PROJECT"],
            message: "[ver++]",
            force: true
          )

          sh("git push origin HEAD:develop_new")
    #   push_to_git_remote(remote: "origin", local_branch: "HEAD", remote_branch: options[:remote_branch], force: false)
    end


platform :ios do
    desc "This lane generated the build"
    lane :build do |options|
        # Options passed by user
        puts options

        # Increment build number
		    updated_build_num = increment_build_number(xcodeproj: project)

        # Build Name
		    generate_build_name

        # Generate build
        generate_build
    end

# Lane to create build name using the version
    lane :generate_build_name do |options|
      version = get_version_number(target: ENV["APP_TARGET"])
      build_number = get_build_number(xcodeproj: ENV["APP_PROJECT"])
      puts build_number
        puts "VERSION : #{version}"
        current_date = Time.new.strftime('%Y.%m.%d')
      build_name = "-Ver-"+ version + "-B-" + build_number + "-" +current_date
      puts "build_name: #{build_name}"
      puts "app_name"
        output_build_name = app_name
        # Build name
        puts "#{app_name} BUILD NAME : #{output_build_name}"
    end

    desc "This lane will build application with the provided configuration"
    lane :generate_build do |options|

      workspace = ENV["APP_WORKSPACE"]
      puts "WORKSPACE: #{ENV['APP_WORKSPACE']}"

        args = {
                scheme: ENV["APP_SCHEME"],
                project: project,
                clean: ENV["APP_CLEAN_BUILD"],
                export_method: ENV["APP_EXPORT_METHOD"],
                configuration: ENV["APP_BUILD_CONFIG"],
                include_bitcode: false,
                export_options: ({
                    compileBitcode: false
                }),
                codesigning_identity: ENV["CODESIGN_CERTIFICATE"],
                output_name: output_build_name,
                output_directory: "./build",
                archive_path: "./archives",
                skip_build_archive: true,
        }

          if ENV["APP_WORKSPACE"]
            args[:workspace] = ENV["APP_WORKSPACE"]
          else
            args[:project] = ENV["APP_PROJECT"]
          end
        gym(args)
    end

    lane :lint do
      puts "WORKSPACE GIT: #{ENV['GITHUB_TOKEN']}"
      swiftlint(
        mode: :lint,                                    # SwiftLint mode: :lint (default) or :autocorrect
        # executable: "./Pods/SwiftLint/swiftlint",       # The SwiftLint binary path (optional). Important if you've installed it via CocoaPods
        output_file: "./build/swiftlint.result.xml",   # The path of the output file (optional)
        reporter: "checkstyle",                         # The custom reporter to use (optional)
        config_file: "./.swiftlint.yml",               # The path of the configuration file (optional)
        ignore_exit_status: true,                     # Allow fastlane to continue even if SwiftLint returns a non-zero exit status (Default: false)
	)
    end

    lane :analysis do
       slather(
         cobertura_xml: true,
         jenkins: true,
         verbose: true,
         scheme: ENV["APP_SCHEME"],
         proj:  ENV["APP_PROJECT"],
         build_directory: "build",
         output_directory: "build",
         workspace: ENV["APP_WORKSPACE"]
       )
    end

    desc "This lane will upload build to the respective distribution opted for"
    lane :upload do |options|

      generate_build_name

      # Fetch changelog from Git repo
      changelog = changelog_from_git_commits(
                            commits_count: ENV["NO_OF_COMMITS"],
                            pretty: "- (%ae) %s",
                            date_format: "short",
                            match_lightweight_tag: false,
                            merge_commit_filtering: "exclude_merges")

      # puts "APP DISTRIBUTION : #{distribution}"

      # Select upload option as per user selection
      case ENV["APP_DISTRIBUTION"]
      when 'testfairy'
          # Push build on to TestFairy
          testfairy(api_key: ENV["DISTRIBUTION_API_TOKEN"],
                      ipa: "./#{ENV['APP_WORKSPACE']}/*.ipa",
                      # symbols_file: '**/ENV['APP_WORKSPACE']/*.app.dSYM.zip',
                      comment: changelog,
                      testers_groups: ENV["GROUPS"],
                      notify: "on"
                      )
        else
          # No channel opted for notifing build release
          puts "No distribution opted to upload app"
        end
    end
end
